name: Code Checks

on:
  push:
    branches:
      - stage

jobs:
  version_check:
    name: Check if version exists on main repo
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Check version
        run: |
          echo "[i] Getting versions from the main repo"
          GH_VERSIONS=$(curl -s https://api.github.com/repos/shriyanss/js-recon/releases | jq '.[].name' -r)

          echo "[i] Checking versions"
          ALL_VERSIONS_FOUND=true

          while read -r line; do 
            if [[ "$GH_VERSIONS" = *"$line"* ]]; then
              echo "[✓] Version $line found on GH releases"
            else 
              echo "[!] Version $line NOT found on GH releases"
              ALL_VERSIONS_FOUND=false
            fi
          done < <(jq -r '.[]' versions.json)

          if [[ "$ALL_VERSIONS_FOUND" = "true" ]]; then 
            echo "[✓] All versions in docs found on GH releases"
          else 
            echo "[!] Some versions were not found on GH releases"
            exit 1
          fi

      - name: Check latest stable version
        run: |
          echo "[i] Getting latest stable version from the main repo"
          LATEST_VERSION_GH=$(curl -s https://api.github.com/repos/shriyanss/js-recon/releases/latest | jq '.name' -r)
          
          # get the latest version from the docusaurus.config.ts
          # the var name is `lastVersion: "1.1.1",`

          echo "[i] Getting latest stable version from the docs"
          LATEST_VERSION_DOCS=$(cat docusaurus.config.ts | grep "lastVersion" | cut -d '"' -f 2)
          
          if [[ "$LATEST_VERSION_GH" = "v$LATEST_VERSION_DOCS" ]]; then 
            echo "[✓] Latest stable version in docs matches the latest stable version in the main repo"
          else 
            echo "[!] Latest stable version in docs does not match the latest stable version in the main repo"
            exit 1
          fi
    
  vale:
    needs: version_check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: errata-ai/vale-action@v2.1.1
        env:
          VALE_CONFIG_PATH: ./.vale.ini
        with:
          files: ./docs ./versioned_docs

  build:
    needs: vale
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Make sure the action checks out the repository to the pull request branch
          ref: ${{ github.ref_name }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"
      - name: Install dependencies
        run: npm ci
      - name: Build code
        run: npm run build


  prettier:
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # Make sure the action checks out the repository to the pull request branch
          ref: ${{ github.ref_name }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "22"
          cache: "npm"

      - name: Install Prettier
        run: npm install -g prettier

      - name: Run Prettier
        run: prettier --write . --tab-width 4 --trailing-comma es5 --no-color
      
      - name: Remove node_modules
        run: rm -rf node_modules

      - name: Commit and push changes
        run: |
          git config user.name "prettier-action[bot]"
          git config user.email "prettier-action[bot]@users.noreply.github.com"
          git add .
          git commit -m "chore: prettify code" || echo "No changes to commit"
          git push
